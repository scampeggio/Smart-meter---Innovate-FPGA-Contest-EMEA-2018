LIBRARY ieee ;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_signed.all;
use ieee.numeric_std;
use ieee.numeric_std.all;

-- ITT Giorgi - MODBUS - Sequencer module

-- Top-level module
entity MODBUS is
	port	(
			CLK		:in std_logic ;								-- Master Clock 50MHz
			RST		:in std_logic;									-- Master Clear active low - A
			START		:in std_logic;									-- Start measuring - active low
			READY_TX	:in std_logic;									-- TX UART module ready to accept a new byte, active low
			SEND		:out std_logic;								-- Send one byte, active low
			DATA_IN	:in std_logic_vector(7 downto 0);		-- Parallel data in
			DATA_OUT	:out std_logic_vector(7 downto 0);	-- Parallel data out
			READY_RX	:in std_logic;									-- RX data valid, active low
			DATA_POS	:out std_logic_vector(7 downto 0);
			DATA_NEG	:out std_logic_vector(7 downto 0);
			DATA_VALID	:out std_logic
			);
END MODBUS ;

architecture BEH of MODBUS is
	type		DATA is array (0 to 7) of std_logic_vector(7 downto 0);
	type		DATA1 is array (0 to 8) of std_logic_vector(7 downto 0);
	type 		STATE is (IDLE,SEND_BYTE1,SEND_BYTE2,CNT_INC1,CNT_INC2,WAIT_RX1,WAIT_RX2,CLEAR_CNT,DELAY);
	constant	CLOCK_RATE:			natural := 50000000;
	constant	MEASURE_TIME:		natural := 1000; --ms
	constant	CLK_MEAS_TIME:		natural := (CLOCK_RATE/MEASURE_TIME) * 1000;
	constant	DATA_TX:			DATA:= (x"01",x"04",x"00",x"0b",x"00",x"02",x"00",x"09");
	signal		DELAY_CNT:			natural range 0 to CLK_MEAS_TIME;
	signal		DATA_RX:			DATA1;
	signal 		PRES_STATE,NEXT_STATE: 	STATE;
	signal		CNT:				natural range 0 to 8;
	
	begin --BEH

process(DATA_RX)	-- Floating Point data extraction
 variable		SIGN:			std_logic;	-- 1 negative, 0 positive
 variable		EXPONENT:	std_logic_vector(7 downto 0);
 variable		MANTIX:		std_logic_vector(23 downto 0);
 variable 		DATA_TEMP:	std_logic_vector(23 downto 0);
 variable		COMMA_POS:	natural range 0 to 255;
 variable		K:				natural range 0 to 23;
	begin
		DATA_TEMP				:= (others => '0');
		DATA_POS					<= (others => '0');
		DATA_NEG					<= (others => '0');
		SIGN						:= DATA_RX(5)(7);
		EXPONENT(7 downto 1)	:= DATA_RX(5)(6 downto 0);
		EXPONENT(0)				:= DATA_RX(6)(7);
		MANTIX(23)				:= '1';
		MANTIX(22 downto 16)	:= DATA_RX(6)(6 downto 0);
		MANTIX(15 downto 8) 	:= DATA_RX(4)(7 downto 0);
		MANTIX(7 downto 0)  	:= DATA_RX(5)(7 downto 0);
		COMMA_POS				:= to_integer(unsigned(EXPONENT))-127;
		K					:= 0;
		for I in 0 to 23 loop
			if (23-I>COMMA_POS) then null;
										else DATA_TEMP(K) := MANTIX(I);
												K:= K+1;
			end if;
		end loop;
		if (SIGN = '1')	then DATA_NEG <= DATA_TEMP(7 downto 0);
								else DATA_POS <= DATA_TEMP(7 downto 0);
		end if;
		DATA_POS <= DATA_RX(8);
end process;


process (CLK,RST)	-- Master State Machine
  begin
	if (RST='0') then
		PRES_STATE <= IDLE;
		elsif (rising_edge(CLK)) then
			PRES_STATE <= NEXT_STATE;
	end if;
end process;

process (PRES_STATE,CNT,READY_TX,READY_RX,START,DELAY_CNT)	-- Master State Machine
	begin
		NEXT_STATE <= PRES_STATE;
		case PRES_STATE is
			when IDLE 				=> 	if (START='0') then NEXT_STATE <= SEND_BYTE1;
													end if;
			when SEND_BYTE1 	=>	if (READY_TX = '0') then NEXT_STATE <= SEND_BYTE2;
													end if;
			when SEND_BYTE2	=>	if (READY_TX = '0') then NEXT_STATE <= CNT_INC1;
													end if;
			when CNT_INC1		=>	if (CNT=7) then NEXT_STATE <= CLEAR_CNT;
																	else NEXT_STATE <= SEND_BYTE1;
													end if;
			when CLEAR_CNT		=>	NEXT_STATE <= WAIT_RX1;
			when WAIT_RX1		=>	if (READY_RX = '1') then NEXT_STATE <= WAIT_RX2;
													end if;
			when WAIT_RX2		=>	if (READY_RX = '0') then NEXT_STATE <= CNT_INC2;
													end if;
			when CNT_INC2		=>	if (CNT=8) then NEXT_STATE <= DELAY;
																	else NEXT_STATE <= WAIT_RX1;
													end if;
			when DELAY				=>	if (DELAY_CNT=0) then NEXT_STATE <= IDLE;
													end if;
		end case;
end process;

process(CLK,RST)		-- CNT management
	begin
		if (RST='0') then CNT <= 0;
		elsif rising_edge(CLK) then
			if ((PRES_STATE = CNT_INC1) or (PRES_STATE = CNT_INC2)) then
				CNT <= CNT +1;
			end if;
			if ((PRES_STATE = IDLE) or (PRES_STATE = CLEAR_CNT)) then
				CNT <= 0;
			end if;
		end if;
end process;

process(PRES_STATE,CNT)		-- Data sending
	begin
		DATA_OUT <= (others => '0');
		SEND		<= '1';
		if ((PRES_STATE = SEND_BYTE1) or (PRES_STATE = SEND_BYTE2)) then
			DATA_OUT <= DATA_TX(CNT);
		end if;
		if (PRES_STATE = SEND_BYTE1)  then
			SEND <= '0';
		end if;
end process;

process(CLK,RST)		-- Data receiving
	begin
		if (RST='0') then DATA_RX <= (others => x"00");
		elsif rising_edge(CLK) then
			if (PRES_STATE = CNT_INC2) then
				DATA_RX(CNT) <= DATA_IN;
			end if;
		end if;
end process;


process(CLK,RST)		-- DELAY management
	begin
		if (RST='0') then DELAY_CNT <= CLK_MEAS_TIME;
		elsif rising_edge(CLK) then
			if (PRES_STATE = DELAY)  then
				DELAY_CNT <= DELAY_CNT - 1;
			end if;
			if (DELAY_CNT = 0) then
				DELAY_CNT <= CLK_MEAS_TIME;
			end if;
		end if;
end process;

process(PRES_STATE)
	begin
		DATA_VALID <= '1';
		if (PRES_STATE = DELAY) then DATA_VALID <= '0';
		end if;
		DATA_VALID <= '0';
end process;


end BEH;